---
description:
globs:
alwaysApply: true
---
# üé∂ Gesture-Controlled Spotify Music Web App ‚Äì Project Rulebook

## üîπ 1. Core Idea
A web-based music player powered by Spotify Web Playback SDK, where:  
- Music is streamed via Spotify Premium account.  
- Hand gestures (captured with Mediapipe + OpenCV) control playback (play/pause, next, previous, volume).  
- Gestures are mapped to actions using a shared JSON config file for consistency between backend and frontend.  

---

## üîπ 2. Architecture Overview
[ Frontend - React ]
   ‚Ä¢ UI for player + playlists
   ‚Ä¢ Spotify Web Playback SDK for music playback
   ‚Ä¢ WebSocket client (receives gesture events)
   ‚Ä¢ Uses gesture-action mapping (JSON) for control

        ‚ñ≤
        ‚îÇ (WebSocket: pause, next, volume)
        ‚ñº

[ Backend - FastAPI ]
   ‚Ä¢ Spotify OAuth + token refresh
   ‚Ä¢ REST APIs for playlists/tracks
   ‚Ä¢ Gesture Service (Mediapipe + OpenCV)
   ‚Ä¢ Loads gesture-action mapping (JSON)
   ‚Ä¢ Emits mapped actions as JSON via WebSocket

        ‚ñº

[ Spotify ]
   ‚Ä¢ Web API (fetch playlists, track metadata)
   ‚Ä¢ Web Playback SDK (embedded in frontend)
   ‚Ä¢ Requires Spotify Premium

---

## üîπ 3. Gesture ‚Üí Action Mapping (JSON Config)

Example mappings:  
- Thumb + Middle finger pinch ‚Üí Toggle Play/Pause  
- Thumb + Ring finger pinch ‚Üí Next Track  
- Thumb + Pinky finger pinch ‚Üí Previous Track  
- Thumb + Index finger distance ‚Üí Volume Control (distance mapped to volume percentage)  

---

## üîπ 4. How JSON Mapping Works

- Backend  
  - Loads gestures.json at startup.  
  - Detects gesture and looks up its action.  
  - Emits an event such as "toggle_play" or "volume_control".  

- Frontend  
  - Receives WebSocket event.  
  - Uses the action to call Spotify SDK methods like play, pause, skip, or set volume.  

---

## üîπ 5. Technology Stack

- Frontend
  - React (Vite or Next.js optional)
  - TailwindCSS (UI styling)
  - Spotify Web Playback SDK
  - WebSocket client  

- Backend
  - FastAPI (REST + WebSocket)
  - Mediapipe + OpenCV (gesture recognition)
  - asyncio Queue (for sending gesture events)
  - Spotify Web API (OAuth + metadata)  

- Other
  - OAuth 2.0 flow for Spotify login
  - Docker (optional, for deployment)
  - SQLite/Postgres (optional, if you add playlists/users)  

---

## üîπ 6. Development Steps

1. Spotify Setup  
   - Register app at Spotify Developer Dashboard.  
   - Get client credentials.  
   - Set redirect URI (e.g., http://localhost:8000/callback).  

2. Backend  
   - Implement Spotify OAuth (login, callback).  
   - Implement playlist and track endpoints using Spotify Web API.  
   - Implement WebSocket endpoint for gestures.  
   - Adapt gesture detection code to emit events instead of OS key presses.  

3. Frontend  
   - Implement Spotify login button.  
   - Initialize Spotify Web Playback SDK with access token.  
   - Subscribe to backend WebSocket for gesture events.  
   - Map gestures to SDK controls (toggle play, next track, set volume).  

4. Testing  
   - Try play/pause gesture ‚Üí should pause/resume Spotify track.  
   - Try volume pinch ‚Üí should adjust Spotify volume.  
   - Verify next/previous gestures.  

---

## üîπ 7. Benefits of JSON Mapping
- Centralized configuration ‚Üí no hardcoding gestures in code.  
- Both backend and frontend stay in sync.  
- Easy to extend (e.g., add gesture for shuffle or ‚Äúlike song‚Äù).  
- Makes the system more flexible and maintainable.  

---

## üîπ 8. Limitations
- Requires Spotify Premium for playback.  
- No direct MP3 access (Spotify SDK handles all playback).  
- Must deploy backend on HTTPS (Spotify SDK requires secure context).  
